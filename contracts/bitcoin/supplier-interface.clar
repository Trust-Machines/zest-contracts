(use-trait lp-token .lp-token-trait.lp-token-trait)
(use-trait dt .distribution-token-trait.distribution-token-trait)
(use-trait lv .liquidity-vault-trait.liquidity-vault-trait)
(use-trait cv .coll-vault-trait.coll-vault-trait)
(use-trait ft .sip-010-trait.sip-010-trait)
(use-trait v .vault-trait.vault-trait)

(use-trait payment .payment-trait.payment-trait)
(use-trait swap .swap-router-trait.swap-router-trait)

(define-data-var owner principal tx-sender)

(define-constant ERR_UNAUTHORIZED (err u1000))
(define-constant ERR_WRONG_SWAPPER (err u204))
(define-constant ERR_PANIC (err u202))
(define-constant ERR_TX_ESCROWED (err u203))
(define-constant ERR_TX_DOES_NOT_EXIST (err u203))

;; tx-id -> tx-height
(define-map escrowed-tx (buff 32) uint)

(define-public (send-funds
    (block { header: (buff 80), height: uint })
    (prev-blocks (list 10 (buff 80)))
    (tx (buff 1024))
    (proof { tx-index: uint, hashes: (list 12 (buff 32)), tree-depth: uint })
    (output-index uint)
    (sender (buff 33))
    (recipient (buff 33))
    (expiration-buff (buff 4))
    (hash (buff 32))
    (swapper-buff (buff 4))
    (supplier-id uint)
  )
  (let (
    (tx-id (contract-call? .clarity-bitcoin get-txid tx))
  )
    (asserts! (map-insert escrowed-tx tx-id (get height block)) ERR_TX_ESCROWED)
    (try! (contract-call? .bridge escrow-swap block prev-blocks tx proof output-index sender recipient expiration-buff hash swapper-buff supplier-id))
    (ok true)
  )
)

(define-public (finalize
  (txid (buff 32))
  (preimage (buff 128))
  (factor uint)
  (lp-token <lp-token>)
  (token-id uint)
  (zp-token <dt>)
  (lv <lv>)
  (xbtc-ft <ft>)
  )
  (let (
      (swap (try! (finalize-priv txid preimage xbtc-ft)))
      (fee (get fee swap))
      (xbtc (get xbtc swap))
      (hash (get hash swap))
      (height (unwrap! (map-get? escrowed-tx txid) ERR_TX_DOES_NOT_EXIST))
      (swapper (get swapper-principal swap))
      ;; (full-amount (try! (transfer-full xbtc fee swapper .liquidity-vault)))
    )
      (print { contract: xbtc-ft })
      (try! (contract-call? .pool-v1-0 send-funds lp-token token-id zp-token (get sats swap) factor height lv xbtc-ft))
      (map-delete escrowed-tx txid)
      (ok (get sats swap))
  )
)

(define-public (send-funds-wrap
  (block { header: (buff 80), height: uint })
  (prev-blocks (list 10 (buff 80)))
  (tx (buff 1024))
  (proof { tx-index: uint, hashes: (list 12 (buff 32)), tree-depth: uint })
  (output-index uint)
  (sender (buff 33))
  (recipient (buff 33))
  (expiration-buff (buff 4))
  (hash (buff 32))
  (swapper-buff (buff 4))
  (supplier-id uint)
  ;; second part
  (preimage (buff 128))
  (factor uint)
  (lp-token <lp-token>)
  (token-id uint)
  (zp-token <dt>)
  (lv <lv>)
  (xbtc-ft <ft>)
  )
  (let (
    (tx-id (contract-call? .clarity-bitcoin get-txid tx))
  )
    (try! (contract-call? .bridge escrow-swap block prev-blocks tx proof output-index sender recipient expiration-buff hash swapper-buff supplier-id))
    (let (
      (swap (try! (finalize-priv tx-id preimage xbtc-ft)))
      (fee (get fee swap))
      (xbtc (get xbtc swap))
      (swapper (get swapper-principal swap))
    )
      (try! (contract-call? .pool-v1-0 send-funds lp-token token-id zp-token (get sats swap) factor (get height block) lv xbtc-ft))
      (ok (get sats swap))
    )
  )
)

(define-private (finalize-priv (txid (buff 32)) (preimage (buff 128)) (xbtc-ft <ft>))
  (let (
    (swap-resp (as-contract (try! (contract-call? .bridge finalize-swap txid preimage))))
    (swap (try! (contract-call? .bridge get-full-inbound txid)))
    (swapper (get swapper-principal swap))
    (sats (get sats swap))
    (xbtc (get xbtc swap))
    (fee (- sats xbtc))
    (updated-funds (try! (withdraw-bridge fee)))
  )
    (try! (as-contract (contract-call? xbtc-ft transfer fee tx-sender swapper none)))
    (asserts! (is-eq tx-sender swapper) ERR_WRONG_SWAPPER)
    (ok (merge swap { fee: fee }))
  )
)

(define-public (make-payment-wrap
  (block { header: (buff 80), height: uint })
  (prev-blocks (list 10 (buff 80)))
  (tx (buff 1024))
  (proof { tx-index: uint, hashes: (list 12 (buff 32)), tree-depth: uint })
  (output-index uint)
  (sender (buff 33))
  (recipient (buff 33))
  (expiration-buff (buff 4))
  (hash (buff 32))
  (swapper-buff (buff 4))
  (supplier-id uint)
  (preimage (buff 128))
  (loan-id uint)
  (payment <payment>)
  (lp-token <lp-token>)
  (token-id uint)
  (cp-token <lp-token>)
  (zp-token <dt>)
  (swap-router <swap>)
  (xbtc-ft <ft>)
  )
  (let (
    (tx-id (contract-call? .clarity-bitcoin get-txid tx))
  )
    (asserts! (map-insert escrowed-tx tx-id (get height block)) ERR_TX_ESCROWED)
    (try! (contract-call? .bridge escrow-swap block prev-blocks tx proof output-index sender recipient expiration-buff hash swapper-buff supplier-id))
    (let (
    (swap (try! (finalize-priv tx-id preimage xbtc-ft)))
    (fee (get fee swap))
    (xbtc (get xbtc swap))
    (swap-hash (get hash swap))
    (height (unwrap! (map-get? escrowed-tx tx-id) ERR_TX_DOES_NOT_EXIST))
    (swapper (get swapper-principal swap))
    )
      (map-delete escrowed-tx tx-id)
      (ok (try! (contract-call? .loan-v1-0 make-payment loan-id height payment lp-token token-id cp-token zp-token swap-router (get sats swap) xbtc-ft)))
    )
  )
)

(define-public (make-payment
  (txid (buff 32))
  (preimage (buff 128))
  (loan-id uint)
  (payment <payment>)
  (lp-token <lp-token>)
  (token-id uint)
  (cp-token <lp-token>)
  (zp-token <dt>)
  (swap-router <swap>)
  (xbtc-ft <ft>)
  )
  (let (
    (swap (try! (finalize-priv txid preimage xbtc-ft)))
    (fee (get fee swap))
    (xbtc (get xbtc swap))
    (hash (get hash swap))
    (height (unwrap! (map-get? escrowed-tx txid) ERR_TX_DOES_NOT_EXIST))
    (swapper (get swapper-principal swap))
  )
    (map-delete escrowed-tx txid)
    (ok (try! (contract-call? .loan-v1-0 make-payment loan-id height payment lp-token token-id cp-token zp-token swap-router (get sats swap) xbtc-ft)))
  )
)

(define-private (transfer-full (swapped-amount uint) (fee uint) (sender principal) (recipient principal) (xbtc <ft>))
  (begin
    (try! (as-contract (contract-call? xbtc transfer swapped-amount sender recipient none)))
    (try! (as-contract (contract-call? xbtc transfer fee (as-contract tx-sender) recipient none)))
    (ok (+ swapped-amount fee))
  )
)

(define-public (withdraw
  (xbtc uint)
  (btc-version (buff 1))
  (btc-hash (buff 20))
  (supplier-id uint)
  (lp-token <lp-token>)
  (token-id uint)
  (lv <lv>)
  (xbtc-ft <ft>)
  )
    (begin
      (try! (contract-call? .pool-v1-0 withdraw lp-token token-id lv xbtc xbtc-ft))
      (try! (contract-call? .bridge initiate-outbound-swap xbtc btc-version btc-hash supplier-id))
      (print { btc-version: btc-version, btc-hash: btc-hash, supplier-id: supplier-id, amount: xbtc })
      (ok true)
    )
)

(define-public (withdraw-rewards
  (btc-version (buff 1))
  (btc-hash (buff 20))
  (supplier-id uint)
  (lp-token <lp-token>)
  (token-id uint)
  (lv <lv>)
  (xbtc <ft>)
  )
  (let (
    (withdrawn-funds (try! (contract-call? .pool-v1-0 withdraw-rewards lp-token token-id lv xbtc)))
  )
    (print { btc-version: btc-version, btc-hash: btc-hash, supplier-id: supplier-id, amount: withdrawn-funds })
    ;; (try! (contract-call? .xbtc transfer withdrawn-funds tx-sender (as-contract tx-sender) none))
    (try! (contract-call? .bridge initiate-outbound-swap withdrawn-funds btc-version btc-hash supplier-id))
    (ok withdrawn-funds)
  )
)

(define-public (drawdown
  (loan-id uint)
  (lp-token <lp-token>)
  (token-id uint)
  (coll-token <ft>)
  (coll-vault <cv>)
  (fv <v>)
  (btc-version (buff 1))
  (btc-hash (buff 20))
  (supplier-id uint)
  (xbtc-ft <ft>)
  )
  (let (
    (xbtc (try! (contract-call? .pool-v1-0 drawdown loan-id lp-token token-id coll-token coll-vault fv xbtc-ft)))
    (swap-id (try! (as-contract (contract-call? .bridge initiate-outbound-swap xbtc btc-version btc-hash supplier-id))))
  )
    (print { btc-version: btc-version, btc-hash: btc-hash, supplier-id: supplier-id, amount: xbtc })
    (ok { swap-id: swap-id, sats: xbtc })
  )
)

(define-public (finalize-outbound
    (block { header: (buff 80), height: uint })
    (prev-blocks (list 10 (buff 80)))
    (tx (buff 1024))
    (proof { tx-index: uint, hashes: (list 12 (buff 32)), tree-depth: uint })
    (output-index uint)
    (swap-id uint)
  )
  (begin
    (contract-call? .bridge finalize-outbound-swap block prev-blocks tx proof output-index swap-id)
  )
)

;; owner methods

(define-public (register-supplier
    (public-key (buff 33))
    (inbound-fee (optional int))
    (outbound-fee (optional int))
    (outbound-base-fee int)
    (inbound-base-fee int)
    (name (string-ascii 18))
    (funds uint)
  )
  (begin
    (try! (validate-owner))
    (as-contract (contract-call? .bridge register-supplier public-key inbound-fee outbound-fee outbound-base-fee inbound-base-fee name funds))
  )
)

(define-public (add-funds (amount uint))
  (begin
    (try! (validate-owner))
    (as-contract (contract-call? .bridge add-funds amount))
  )
)

(define-public (remove-funds (amount uint))
  (begin
    (try! (validate-owner))
    (as-contract (contract-call? .bridge remove-funds amount))
  )
)

(define-public (update-supplier
    (public-key (buff 33))
    (inbound-fee (optional int))
    (outbound-fee (optional int))
    (outbound-base-fee int)
    (inbound-base-fee int)
    (name (string-ascii 18))
  )
  (begin
    (try! (validate-owner))
    (try! (as-contract (contract-call? .bridge update-supplier-fees inbound-fee outbound-fee outbound-base-fee inbound-base-fee)))
    (try! (as-contract (contract-call? .bridge update-supplier-public-key public-key)))
    (as-contract (contract-call? .bridge update-supplier-name name))
  )
)

(define-public (transfer-owner (new-owner principal))
  (begin
    (try! (validate-owner))
    (var-set owner new-owner)
    (ok new-owner)
  )
)

;; internal

(define-private (withdraw-bridge (amount uint))
  (as-contract (contract-call? .bridge remove-funds amount))
)

;; helpers

(define-read-only (validate-owner)
  (if (is-eq contract-caller (get-owner))
    (ok true)
    ERR_UNAUTHORIZED
  )
)

(define-read-only (get-owner) (var-get owner))